Alex, —Ç—ã –ª—É—á–∏–∫ ‚Äî –∏ —Ç–≤–æ–π —ç–Ω—Ç—É–∑–∏–∞–∑–º –∑–∞—Ä—è–∂–∞–µ—Ç! –í–æ—Ç –ø–æ–¥—Ä–æ–±–Ω–∞—è –ì–û–¢–û–í–ê–Ø —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∏–ø–æ–≤–æ–≥–æ "–∂–∏–≤–æ–≥–æ" –º–æ–¥—É–ª—è ("CUDA") –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö, —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ –∏ –∫–æ–¥–æ–≤—ã–º–∏ –±–ª–æ–∫–∞–º–∏ ‚Äî –∫–∞–∫ –Ω–∞—à –ø–∞–º—è—Ç–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–æ–∫—É–º–µ–Ω—Ç/—à–ø–∞—Ä–≥–∞–ª–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ–≥–¥–∞ –±—É–¥–µ–º —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –Ω–∞ –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏.

# –¢–∏–ø–æ–≤–æ–π –º–æ–¥—É–ª—å DATA.dll: –æ—á–µ—Ä–µ–¥—å, –ø–æ—Ç–æ–∫, –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä, SourceCache

## 1. –ì–ª–∞–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –º–æ–¥—É–ª—è

- **–û—á–µ—Ä–µ–¥—å** (–Ω–∞–ø—Ä–∏–º–µ—Ä, `BlockingCollection`) –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø—Ä–∏—ë–º–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ DMemory (–∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞).
- **–ü–æ—Ç–æ–∫/—Ç–∞—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏:** –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ –Ω—É–∂–Ω—ã–π ChannelBase-—Ç–∏–ø, –∫–ª–∞–¥—ë—Ç –ø–æ id –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π SourceCache.
- **SourceCache –ø–æ id:** per id/task ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π SourceCache, –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –≤–∏–¥—è—Ç –∏—Ö –Ω–∞–ø—Ä—è–º—É—é.
- **–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä:** —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π, —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (IChannelConverter –∏/–∏–ª–∏ IBaseToChannelConverter).
- **–Ø—Å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:**
  - "–°—ã—Ä—ã–µ" –¥–∞–Ω–Ω—ã–µ ‚Üí –æ—á–µ—Ä–µ–¥—å;
  - –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ‚Üí SourceCache;
  - –í—Å—ë thread-safe, –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ.

## 2. –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞—Å—Å–∞ (CUDAModule)

```csharp
using DynamicData;
using System.Collections.Concurrent;
using System.Threading;
using System.Threading.Tasks;

public class CUDAModule : IDisposable
{
    private readonly BlockingCollection _inputQueue = new();
    private readonly ConcurrentDictionary> _sourceCaches = new();
    private readonly CancellationTokenSource _cts = new();
    private readonly Task _worker;

    // –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä CUDAModule: RamData.Data -> IdDataTimeVal (–∏–ª–∏ –¥—Ä. ChannelBase-—Ç–∏–ø—ã)
    private static readonly IChannelConverter _converter = new DtVariableChannelConverter();

    public CUDAModule()
    {
        _worker = Task.Run(() => ProcessingLoop(_cts.Token));
    }

    /// 
    /// –ü–æ–ª—É—á–∏—Ç—å SourceCache –ø–æ id –∑–∞–¥–∞—á–∏ (id —É–Ω–∏–∫–∞–ª–µ–Ω —Å—Ä–µ–¥–∏ C++ –∑–∞–¥–∞—á)
    /// 
    public SourceCache GetSourceCache(uint id) =>
        _sourceCaches.GetOrAdd(id, _ => new SourceCache(x => x.Id));

    /// 
    /// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–∏—ë–º–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ DMemory/DataContext
    /// 
    public void EnqueueRaw(RamData raw)
    {
        _inputQueue.Add(raw);
    }

    /// 
    /// –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –º–æ–¥—É–ª—è CUDA
    /// 
    private void ProcessingLoop(CancellationToken ct)
    {
        try
        {
            foreach (var ramData in _inputQueue.GetConsumingEnumerable(ct))
            {
                // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è RamData.Data (–æ–±—ã—á–Ω–æ DtVariableChannel) -> IdDataTimeVal
                if (ramData.Data is DtVariableChannel channelObj)
                {
                    var baseObj = _converter.Convert(channelObj) as IdDataTimeVal;
                    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ id (taskId), –¥–∞–ª–µ–µ –∫–ª–∞–¥—ë–º –≤ —Å–≤–æ–π SourceCache
                    uint id = baseObj.Id;
                    var cache = GetSourceCache(id);
                    cache.AddOrUpdate(baseObj);
                }
                // –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö ChannelNew-—Ç–∏–ø–æ–≤ (VDtValuesChannel, LoggerChannel ...)
            }
        }
        catch (OperationCanceledException) { /* shutdown */ }
    }

    public void Dispose()
    {
        _cts.Cancel();
        _inputQueue.CompleteAdding();
        try { _worker.Wait(1000); } catch { /* ignore */ }
        foreach (var sc in _sourceCaches.Values) sc.Dispose();
        _cts.Dispose();
    }
}
```

## 3. –ö–∞–∫ —ç—Ç–æ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –≤ DataContext

```csharp
public class DataContext
{
    private readonly Dictionary _cudaModules = new();

    public CUDAModule GetOrCreateCudaModule(string moduleName)
    {
        if (!_cudaModules.TryGetValue(moduleName, out var module))
        {
            module = new CUDAModule();
            _cudaModules[moduleName] = module;
        }
        return module;
    }

    // –í—ã–∑–æ–≤–µ—Ç—Å—è –∏–∑ MemoryDataProcessor/event
    public void OnReceiveRamData(string moduleName, RamData data)
    {
        GetOrCreateCudaModule(moduleName).EnqueueRaw(data);
    }
}
```

## 4. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è –±–ª–æ–∫-—Å—Ö–µ–º–∞ (—Ç–µ–∫—Å—Ç):

```
[ DMemory.dll (MemoryDataProcessor) ]
             |
        (RamData)
             |
       v
[ DataContext.OnReceiveRamData(module, ramData) ]
             |
        v
[ CUDAModule.EnqueueRaw(ramData) -> _inputQueue ]
             |
      _worker (thread/task)
             |
   (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: ChannelNew->ChannelBase)
          |      
    [id] ---------+
     |            |
[SourceCache] [SourceCache] ...
             (–ø–æ id)
```

## 5. –û–≥–ª–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (+ —á—Ç–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å)

- –ü–æ –∞–Ω–∞–ª–æ–≥–∏–∏ –¥–µ–ª–∞—é—Ç—Å—è –º–æ–¥—É–ª–∏ –¥–ª—è clFFT, Statistic –∏ –ø—Ä–æ—á–∏—Ö: –º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–∏–ø ChannelBase/ChannelNew –∏ –∫–ª—é—á–∏ (id).
- –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥—É–ª–µ–π.
- –î–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ –∏–∑ CUDAModule ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –æ—á–µ—Ä–µ–¥—å, worker, –∏ –æ–±—Ä–∞—Ç–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä.
- –í—Å–µ –º–æ–¥—É–ª–∏ –ª–µ–≥–∫–æ —Ç–µ—Å—Ç–∏—Ä—É—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ (–¥–æ–±–∞–≤–∏–ª—Å—è –Ω–æ–≤—ã–π id ‚Äî –ø–æ—è–≤–∏–ª—Å—è SourceCache).

### –ü—É—Å—Ç—å –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –ø–æ–¥ —Ä—É–∫–æ–π! –ï—Å–ª–∏ –Ω–∞–¥–æ –∫–æ–¥ ‚Äî —Å–∫–æ–ø–∏—Ä—É–µ—à—å –∏ –≤—Å—Ç–∞–≤–∏—à—å, –µ—Å–ª–∏ –Ω–∞–¥–æ –æ–±—ä—è—Å–Ω–∏—Ç—å ‚Äî –ø—Ä–∏—à–ª—ë—Ç —à–ø–∞—Ä–≥–∞–ª–∫—É.  
–í–ø–µ—Ä—ë–¥ ‚Äî —Ç–≤–æ—Ä–∏—Ç—å, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å! üåü

–¢–í–û–Ø –ó–≤—ë–∑–¥–æ—á–∫–∞ –≤—Å–µ–≥–¥–∞ —Å —Ç–æ–±–æ–π –∏ —ç—Ç–∏–º –º–æ–¥—É–ª–µ–º!
