–ü—Ä–∏–≤–µ—Ç, Alex! –û—Ç–ª–∏—á–Ω–∞—è –∏ –≤–∞–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤ DATA.dll —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (DataContext) –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è–º–∏ (CUDA, clFFT, Statistic –∏ –¥—Ä.) —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö.

–î–∞–≤–∞–π –ø—Ä–µ–¥–ª–æ–∂—É –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å –∏ –ø–æ—Ç–æ–º —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å:

# –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ DATA.dll –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è–º–∏ –∏ –ø–æ—Ç–æ–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö

```
+----------------------------------------------------+
|                     DataContext                    |   _modules         |   (–∫–ª—é—á ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏, value ‚Äî –º–æ–¥—É–ª—å)
| + void InitializeModules(string[] memoryNames)     |   –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏ –ø–æ –∏–º–µ–Ω–∞–º –ø–∞–º—è—Ç—å
| + IDataModule GetModule(string name)                |
| + StartAll(), StopAll()                             |   –ó–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏
+----------------------------------------------------+
          |                         |                          |
          |                         |                          |
          v                         v                          v
+----------------+        +----------------+          +----------------+
| CUDAModule     |        | clFFTModule    |          | StatisticModule|
+----------------+        +----------------+          +----------------+
| - SourceList buffer          |                   –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è
| - Dictionary> cache                 (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å IDataModule)
| - –ü–æ—Ç–æ–∫ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ (from DMemory -> SourceList) 
| - –ü–æ—Ç–æ–∫ —Ä–∞–∑–±–æ—Ä–∫–∏ (from SourceList -> SourceCache)
| - –ú–µ—Ç–æ–¥—ã AddData(RamData data), Start(), Stop()       | 
+----------------+        +----------------+          +----------------+

```

## –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∏—Ö —Ä–æ–ª–∏

### 1. IDataModule ‚Äî –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–¥—É–ª—è

```csharp
public interface IDataModule : IDisposable
{
    string Name { get; }
    void AddData(RamData data);   // –í—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ DMemory (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)

    void Start();                 // –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤ –º–æ–¥—É–ª—è
    void Stop();                  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–æ–≤ –º–æ–¥—É–ª—è
}
```

### 2. DataModuleBase ‚Äî –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥—É–ª–µ–π

- –°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â–∏–π –∫–æ–¥ –¥–ª—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
- –•—Ä–∞–Ω–∏—Ç `SourceList` (—Ä–µ–∞–∫—Ç–∏–≤–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
- –°–ª–æ–≤–∞—Ä—å `Dictionary>` –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –ø–æ `Id`
- –ü–æ—Ç–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–∑ `SourceList` –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ `SourceCache` –ø–æ –∫–ª—é—á—É `Id`

```csharp
public abstract class DataModuleBase : IDataModule
    where TKey : notnull
{
    public string Name { get; }
    protected SourceList BufferList;
    protected Dictionary> CacheDictionary;
    private CancellationTokenSource? _cts;
    private Task? _processingTask;

    public DataModuleBase(string name)
    {
        Name = name;
        BufferList = new SourceList();
        CacheDictionary = new Dictionary>();
    }

    public void AddData(RamData data)
    {
        if (data.Data is TBuffer buffer)
        {
            BufferList.Add(buffer);
        }
        else
        {
            throw new ArgumentException($"Invalid data type passed to {Name}");
        }
    }

    public void Start()
    {
        _cts = new CancellationTokenSource();
        _processingTask = Task.Run(() => ProcessingLoop(_cts.Token), _cts.Token);
    }

    public void Stop()
    {
        _cts?.Cancel();
        _processingTask?.Wait();
        BufferList.Dispose();
        foreach(var cache in CacheDictionary.Values)
            cache.Dispose();
    }

    protected virtual async Task ProcessingLoop(CancellationToken ct)
    {
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ BufferList, —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ SourceCache —Å —Ä–∞–∑–±–æ—Ä–æ–º –ø–æ Id
        var bufferStream = BufferList.Connect();

        using var subscription = bufferStream.Subscribe(changes =>
        {
            foreach (var change in changes)
            {
                if (change.Reason == ListChangeReason.Add)
                {
                    DistributeItem(change.Item.Current);
                }
            }
        });

        try
        {
            while (!ct.IsCancellationRequested)
            {
                await Task.Delay(100, ct); // –∏–ª–∏ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è/—Å–æ–±—ã—Ç–∏—è
            }
        }
        catch (TaskCanceledException) { }
    }

    protected void DistributeItem(TBuffer item)
    {
        var key = ExtractKey(item);
        if (!CacheDictionary.TryGetValue(key, out var cache))
        {
            cache = new SourceCache(ExtractKey);
            CacheDictionary[key] = cache;
        }
        var cacheItem = ConvertBufferToCache(item);
        cache.AddOrUpdate(cacheItem);
    }

    protected abstract TKey ExtractKey(TBuffer item);
    protected abstract TCache ConvertBufferToCache(TBuffer item);

    public void Dispose()
    {
        Stop();
    }
}
```

### 3. –ü—Ä–∏–º–µ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è: CUDAModule

```csharp
public class CUDAModule : DataModuleBase
{
    public CUDAModule() : base("CUDA") { }

    protected override uint ExtractKey(DtVariable item) => item.Id;
    protected override DtVariable ConvertBufferToCache(DtVariable item) => item;
}
```

–ü–æ–¥–æ–±–Ω—ã–º –æ–±—Ä–∞–∑–æ–º —Å–æ–∑–¥–∞—é—Ç—Å—è `clFFTModule`, `StatisticModule` –∏ —Ç.–¥. –ú–µ–Ω—è–µ—Ç—Å—è —Ç–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

### 4. DataContext ‚Äî –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥—É–ª–µ–π –∏ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ DMemory

```csharp
public class DataContext : IDisposable
{
    private readonly Dictionary _modules = new();

    public void InitializeModules(IEnumerable memoryNames)
    {
        foreach(var name in memoryNames)
        {
            if (_modules.ContainsKey(name)) continue;

            IDataModule module = name switch
            {
                "CUDA" => new CUDAModule(),
                "clFFT" => new ClFFTModule(),
                "STATISTIC" => new StatisticModule(),
                _ => throw new NotSupportedException($"Module {name} is not supported")
            };
            _modules[name] = module;
            module.Start();
        }
    }

    public IDataModule GetModule(string name)
    {
        if (_modules.TryGetValue(name, out var module))
            return module;
        throw new KeyNotFoundException($"Module {name} not found");
    }

    public void StopAll()
    {
        foreach(var module in _modules.Values)
            module.Stop();
    }

    public void Dispose()
    {
        StopAll();
        foreach(var module in _modules.Values)
            module.Dispose();
    }

    // –ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ DMemory.dll —Å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ –∏–º–µ–Ω–µ–º –ø–∞–º—è—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "CUDA")
    public void OnReceiveData(string moduleName, RamData data)
    {
        if (_modules.TryGetValue(moduleName, out var module))
        {
            module.AddData(data);
        }
        else
        {
            // –ª–∏–±–æ –ª–æ–≥, –ª–∏–±–æ —Å–æ–∑–¥–∞–π –º–æ–¥—É–ª—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            Console.WriteLine($"Module {moduleName} not found");
        }
    }
}
```

# –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏

- –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –ª–µ–∂–∏—Ç –≤ SourceList ‚Äî –ø–æ—Ç–æ–∫ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (`AddData` –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –ø–æ—Ç–æ–∫–∞ DMemory).
- –ü—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ (—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ) ‚Äî –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∑–∞–¥–∞—á–µ, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑–±–∏—Ä–∞–µ—Ç –ø–æ—Ç–æ–∫ –±—É—Ñ–µ—Ä–∞ –∏ —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ SourceCache –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É id.
- –î–ª—è –∫–∞–∂–¥–æ–≥–æ id ‚Äî —Å–≤–æ–π SourceCache, —á—Ç–æ —É–¥–æ–±–Ω–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç —Å–ª—É—à–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
- –û–±–µ—Å–ø–µ—á–µ–Ω–∞ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ.
- –õ–∏—à—å –æ–¥–∏–Ω —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π DataContext –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏.

# –ü—Ä–µ–¥–ª–∞–≥–∞—é –æ–±—Å—É–¥–∏—Ç—å

- –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SourceList –∏ SourceCache (TBuffer/TCache) ‚Äî –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ?
- –õ–æ–≥–∏–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –º–æ–¥—É–ª—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–∞–º—è—Ç–∏ (–∏–∑ DMemory)
- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ (—Ä–∞–∑–º–µ—Ä—ã –æ—á–µ—Ä–µ–¥–µ–π, –∑–∞–¥–µ—Ä–∂–∫–∏)
- –ú–µ—Ö–∞–Ω–∏–∑–º—ã –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–¥—É–ª–µ–π (–∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å/–≥–∞—Å–∏—Ç—å)
- –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

–ï—Å–ª–∏ –Ω—Ä–∞–≤–∏—Ç—Å—è –¥–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ ‚Äî –º–æ–≥—É –ø–æ–º–æ—á—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≥–æ—Ç–æ–≤—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–æ–¥ —Å —Ç–µ—Å—Ç–∞–º–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π!  
–¢–≤–æ—è –ó–≤—ë–∑–¥–æ—á–∫–∞ –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º ‚ú®üåü

[1] https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/attachments/73552077/837ff6a5-062b-430b-8d0d-9f4a4f487083/MemoryDataProcessor.cs
[2] https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/attachments/73552077/de21d9bc-7011-4ced-be7e-708a3aabe3a5/BaseMetaData.cs
[3] https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/attachments/73552077/74e2baf5-2f23-467c-a73a-743625960a59/ChannelBase.cs
[4] https://ppl-ai-file-upload.s3.amazonaws.com/web/direct-files/attachments/73552077/0a05bf17-cb09-438f-a9f5-d6c97c58ea0d/Opisanie-peredachi-dannykh.txt